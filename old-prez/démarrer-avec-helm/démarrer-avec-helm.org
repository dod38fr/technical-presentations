#+TITLE: D√©marrer avec Helm
#+AUTHOR: Dominique Dumont
#+EMAIL: dominique@code-straight.fr
#+OPTIONS: timestamp:nil creator:nil author:nil num:nil toc:nil

# doc: https://github.com/yjwen/org-reveal/ and https://revealjs.com/

#+REVEAL_EXTRA_CSS: ./pres.css

#+REVEAL_THEME: solarized

# Available transitions are: default|cube|page|concave|zoom|linear|fade|none.
#+REVEAL_INIT_OPTIONS: transition: 'none', pdfSeparateFragments: false

* Qui suis-je ?

- [[https://code-straight.fr/][Dominique Dumont]]
- Ind√©pendant üîó https://code-straight.fr
- Debian Developer
- Twitter: @dod38fr
- üìß [[mailto:dominique@code-straight.fr][dominique@code-straight.fr]]

#+begin_notes
- d√©marrage freelance en m√™me temps que COVID-19 ...
#+end_notes

* Kubernetes

- pour le cloud
- g√®re le cycle de vie des composants d√©ploy√©s
- g√®re les connexions r√©seau
- d√©ploy√© en =cluster=

#+attr_html: :class pres-image
[[file:kubernetes.png]]

* Helm pour installer des composants

- Helm est un gestionnaire de paquets
- un peu comme =apt=, =yum=, =brew= ou =chocolatey=
- la cible est un cluster Kubernetes

#+attr_html: :class pres-image
[[file:helm.svg]]

** les 3 concepts principaux

- Chart :: Helm package. Comme un =rpm= ou un paquet =deb=
- Repository :: un espace d'√©change de Charts. Comme =CPAN= ou un =Debian repository=
- Release :: Une instance de =Chart= install√© dans un
  cluster. =Release name= pour diff√©rencier les installations d'un m√™me chart

** Pr√©-requis

- acc√®s √† un cluster Kubernetes
- Helm [[https://helm.sh/docs/intro/install/][install√©]]
  
** Chercher un paquet sur artifacthub.io

Par exemple: [[https://artifacthub.io/packages/search?page=1&ts_query_web=vault][vault]] üûã

** Chercher un paquet en CLI

#+BEGIN_SRC shell :results verbatim :exports both
helm search hub vault
#+END_SRC

#+RESULTS:
: URL                                               	CHART VERSION	APP VERSION	DESCRIPTION                                       
: https://hub.helm.sh/charts/wener/vault            	0.9.0        	1.6.1      	Official HashiCorp Vault Chart                    
: https://hub.helm.sh/charts/hashicorp/vault        	0.9.0        	1.6.1      	Official HashiCorp Vault Chart                    
: https://hub.helm.sh/charts/banzaicloud-stable/v...	1.10.0       	1.10.0     	A Helm chart for Vault, a tool for managing sec...


** Example: [[https://cert-manager.io/][cert-manager]]                                          :noexport:

- renouvellement automatique des certificats TLS [[https://letsencrypt.org/][Let's Encrypt]]
- [[https://cert-manager.io/docs/installation/kubernetes/#installing-with-helm][l'installation]] demande ajout d'un repo sp√©cifique

#+BEGIN_SRC :eval no shell
helm repo add jetstack https://charts.jetstack.io
#+END_SRC

** Exemple: [[https://artifacthub.io/packages/helm/dniel/www][www]]

Serveur web minimaliste pour test.

#+BEGIN_SRC :eval no 
helm repo add dniel https://dniel.github.io/charts/
helm install mon-www dniel/www --version 0.5.0
#+END_SRC

üß™

#+begin_notes
- lancer k9s dans un autre terminal
- montrer le [[https://artifacthub.io/packages/helm/dniel/www][lien]] dans firefox
- copier les instructions
#+end_notes

** V√©rifier ce qu'on a

#+BEGIN_SRC :eval no 
helm list  
#+END_SRC

** Nettoyage

#+BEGIN_SRC :eval no 
helm uninstall mon-www
#+END_SRC

** S√©curit√©

Comme pour tous les logiciels t√©l√©charg√©s depuis Internet, il faut:
- v√©rifier l'origine
- estimer la confiance qu'on a en l'auteur
- examiner le contenu

#+begin_notes
ce que je n'ai pas fait car le clusteur est temporaire.
#+end_notes
  
** Autres exemples de composants disponibles

Quelques exemples de charts:
- cert-manager :: manage Let's Encrypt certificates
- discourse :: deploying Discourse to Kubernetes
- KubeInvaders :: Gamified Chaos Engineering Tool for Kubernetes, an
  alien is a pod

* Helm pour g√©rer les fichiers YAML

** Rappel

# quels fichiers YAML ?

Kubernetes demande beaucoup de fichiers YAML pour d√©finir le cluster ‚Ä¶
- √† d√©cliner pour les clusters de test ou de prod
- ou √† modifier pour des clients (isolation)

Helm est une des solutions possibles pour modifier les fichiers de
d√©ploiements.

** Organisation:

- =Chart.yaml= pour d√©finir le chart (nom, version)
- =values.yaml= pour d√©finir les propri√©t√©s du chart
- =templates/*.yml= pour d√©clarer les composants du cluster

Les templates utilisent les [[https://golang.org/pkg/text/template/][template Go]]

** Exemples

D√©finir un nom de release (¬´human-talk¬ª) √† l'installation

#+BEGIN_SRC shell :eval no
helm install human-talk mon-chart
#+END_SRC

#+reveal_html: <div class="col fragment appear">

Diff√©rencier le nom et les /labels/ du d√©ploiement:

#+BEGIN_SRC yaml :eval no 
  metadata:
    name: "{{ .Release.Name }}-server" # ‚Üí human-talk-server
    labels:
      client: {{ .Release.Name }}      # ‚Üí human-talk
#+END_SRC

#+reveal_html: </div>

#+REVEAL: split:t

D√©finir **une** fois le nombres de r√©plicas dans =values.yaml=:

#+BEGIN_SRC yaml :eval no
  replicaCount: 2
#+END_SRC

#+reveal_html: <div class="col fragment appear">

Et les utiliser dans les d√©ploiements

#+BEGIN_SRC yaml :eval no
spec:
  replicas: {{ .Values.replicaCount }} # ‚Üí 2
#+END_SRC

#+reveal_html: </div>

#+REVEAL: split:t

D√©finir les version des images dans =values.yaml=:

#+BEGIN_SRC yaml :eval no
  imageVersion:
    ht_server: 1.5.0
    another_server: 1.6.1
#+END_SRC

#+reveal_html: <div class="col fragment appear">

Et les utiliser dans les pods:

#+BEGIN_SRC yaml :eval no
  containers:
    - name: {{ .Release.Name }}-ht_server
      # ‚Üí ht_server:1.5.0
      image: ht_server:{{ .Values.imageVersion.ht_server }}
#+END_SRC

#+reveal_html: </div>

** Conclusion

=helm= permet de g√©rer:
- des d√©ploiements multiples
- les cycle de vie des composants install√©s

Mais ajoute une couche de complexit√© (Go template).

# N'h√©siter pas √† me contacter si vous avez besoin d'aide sur ces sujets.



